// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  firstName         String
  lastName          String
  role              Int
  fullName          String?
  isDelete          Boolean?        @default(false)
  resetToken        String?
  resetTokenExpires BigInt?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  auth              Auth?
  saved             Saved?
  permission        Permission?
  account           UserEmail?
  lived             UserLived?
  infos             UserInfo[]
  works             UserWork[]
  educations        UserEducation[]
  collections       Collection[]
  albums            Album[]
  medias            Media[]
  likes             Like[]
  comments          Comment[]
  posts             Post[]
  postTags          PostOnUser[]
  albumTags         AlbumOnUser[]
  usersFollowed     Follow[]        @relation(name: "userFollowed")
  usersFollowing    Follow[]        @relation(name: "userFollowing")
  eventsCreated     Event[]         @relation(name: "creator")
  eventsAttended    EventOnUser[]
  friendsRequest    Friend[]        @relation(name: "requester")
  friendsReceive    Friend[]        @relation(name: "receiver")

  @@index([isDelete])
}

model UserEmail {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  audience  Int
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model UserInfo {
  id        String   @id @default(uuid())
  content   String
  type      Int
  audience  Int
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model UserWork {
  id          String      @id @default(uuid())
  company     String
  position    String
  audience    Int
  cityCode    Int
  isCurrently Boolean
  isDelete    Boolean?    @default(false)
  description String      @db.VarChar(3000)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  timePeriod  TimePeriod?

  @@index([isDelete])
}

model UserEducation {
  id          String      @id @default(uuid())
  school      String
  audience    Int
  isGraduated Boolean
  isDelete    Boolean?    @default(false)
  description String      @db.VarChar(3000)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  timePeriod  TimePeriod?

  @@index([isDelete])
}

model UserLived {
  id           String   @id @default(uuid())
  cityCode     Int
  districtCode Int
  audience     Int
  isDelete     Boolean? @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model TimePeriod {
  id              String         @id @default(uuid())
  isDelete        Boolean?       @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  startDate       DateRange?     @relation(name: "startDate")
  endDate         DateRange?     @relation(name: "endDate")
  userWorkId      String?        @unique
  userWork        UserWork?      @relation(fields: [userWorkId], references: [id], onDelete: Cascade)
  userEducationId String?        @unique
  userEducation   UserEducation? @relation(fields: [userEducationId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model DateRange {
  id          String      @id @default(uuid())
  year        Int
  month       Int
  date        Int
  isDelete    Boolean?    @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  startDateId String?     @unique
  startDate   TimePeriod? @relation("startDate", fields: [startDateId], references: [id], onDelete: Cascade)
  endDateId   String?     @unique
  endDate     TimePeriod? @relation("endDate", fields: [endDateId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model Permission {
  id        String   @id @default(uuid())
  create    Boolean
  update    Boolean
  remove    Boolean
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model Auth {
  id        String   @id @default(uuid())
  token     String   @db.VarChar(3000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friend {
  id          String   @id @default(uuid())
  status      Int
  isDelete    Boolean? @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requesterId String   @unique
  requester   User     @relation("requester", fields: [requesterId], references: [id], onDelete: Cascade)
  receiverId  String   @unique
  receiver    User     @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([requesterId, receiverId])
  @@index([isDelete])
}

model Collection {
  id         String   @id @default(uuid())
  isDelete   Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedItems Saved[]

  @@index([isDelete])
}

model Saved {
  id           String      @id @default(uuid())
  isDelete     Boolean?    @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectionId String?
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  posts        Post[]

  @@index([isDelete])
}

model Post {
  id        String       @id @default(uuid())
  content   String
  cityCode  Int?
  feeling   Int?
  audience  Int
  isDelete  Boolean?     @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedId   String?
  saved     Saved?       @relation(fields: [savedId], references: [id])
  comments  Comment[]
  likes     Like[]
  medias    Media[]
  followers Follow[]
  tags      PostOnUser[]

  @@index([isDelete])
}

model PostOnUser {
  id        String   @id @default(uuid())
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model Event {
  id          String        @id @default(uuid())
  title       String
  description String?
  date        DateTime
  isDelete    Boolean?      @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creatorId   String
  creator     User          @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade)
  attendees   EventOnUser[]

  @@index([isDelete])
}

model EventOnUser {
  id        String   @id @default(uuid())
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model Follow {
  id         String   @id @default(uuid())
  isDelete   Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  followerId String
  follower   User     @relation("userFollowed", fields: [followerId], references: [id], onDelete: Cascade)
  followedId String
  followed   User     @relation("userFollowing", fields: [followedId], references: [id], onDelete: Cascade)
  postId     String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(3000)
  parentId  String?
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model Like {
  id        String   @id @default(uuid())
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  @@index([isDelete])
}

model Album {
  id          String        @id @default(uuid())
  name        String
  description String?       @db.VarChar(3000)
  audience    Int
  feeling     Int?
  cityCode    Int?
  isDelete    Boolean?      @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  authorId    String
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  medias      Media[]
  tags        AlbumOnUser[]

  @@index([isDelete])
}

model AlbumOnUser {
  id        String   @id @default(uuid())
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  albumId   String
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model Media {
  id        String   @id @default(uuid())
  path      String
  size      Int
  publicId  String
  type      String
  hash      String   @unique
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  albumId   String?
  album     Album?   @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([isDelete])
}

model City {
  id        String   @id @default(uuid())
  nameEn    String
  nameVn    String
  code      Int
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDelete])
}

model District {
  id        String   @id @default(uuid())
  nameEn    String
  nameVn    String
  code      Int
  cityCode  Int
  isDelete  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDelete])
}

model Ward {
  id           String   @id @default(uuid())
  nameEn       String
  nameVn       String
  code         Int
  districtCode Int
  isDelete     Boolean? @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([isDelete])
}
